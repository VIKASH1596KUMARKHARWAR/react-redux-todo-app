{"ast":null,"code":"// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// import { nanoid } from 'nanoid';\n\n// export const getTodosAsync = createAsyncThunk(\n// \t'todos/getTodosAsync',\n// \tasync () => {\n// \t\tconst resp = await fetch('http://localhost:7000/todos');\n// \t\tif (resp.ok) {\n// \t\t\tconst todos = await resp.json();\n// \t\t\treturn { todos };\n// \t\t}\n// \t}\n// );\n\n// export const addTodoAsync = createAsyncThunk(\n// \t'todos/addTodoAsync',\n// \tasync (payload) => {\n// \t\tconst resp = await fetch('http://localhost:7000/todos', {\n// \t\t\tmethod: 'POST',\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({ title: payload.title, dueDate: payload.dueDate }),\n// \t\t});\n\n// \t\tif (resp.ok) {\n// \t\t\tconst todo = await resp.json();\n// \t\t\treturn { todo };\n// \t\t}\n// \t}\n// );\n\n// export const toggleCompleteAsync = createAsyncThunk(\n// \t'todos/completeTodoAsync',\n// \tasync (payload) => {\n// \t\tconst resp = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n// \t\t\tmethod: 'PATCH',\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({ completed: payload.completed }),\n// \t\t});\n\n// \t\tif (resp.ok) {\n// \t\t\tconst todo = await resp.json();\n// \t\t\treturn { todo };\n// \t\t}\n// \t}\n// );\n\n// export const deleteTodoAsync = createAsyncThunk(\n// \t'todos/deleteTodoAsync',\n// \tasync (payload) => {\n// \t\tconst resp = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n// \t\t\tmethod: 'DELETE',\n// \t\t});\n\n// \t\tif (resp.ok) {\n// \t\t\treturn { id: payload.id };\n// \t\t}\n// \t}\n// );\n\n// export const todoSlice = createSlice({\n// \tname: 'todos',\n// \tinitialState: [],\n// \treducers: {\n// \t\taddTodo: (state, action) => {\n// \t\t\tconst todo = {\n// \t\t\t\tid: nanoid(),\n// \t\t\t\ttitle: action.payload.title,\n// \t\t\t\tdueDate: action.payload.dueDate,\n// \t\t\t\tcompleted: false,\n// \t\t\t};\n// \t\t\tstate.push(todo);\n// \t\t},\n// \t\ttoggleComplete: (state, action) => {\n// \t\t\tconst index = state.findIndex((todo) => todo.id === action.payload.id);\n// \t\t\tstate[index].completed = action.payload.completed;\n// \t\t},\n// \t\tdeleteTodo: (state, action) => {\n// \t\t\treturn state.filter((todo) => todo.id !== action.payload.id);\n// \t\t},\n// \t},\n// \textraReducers: {\n// \t\t[getTodosAsync.fulfilled]: (state, action) => {\n// \t\t\treturn action.payload.todos;\n// \t\t},\n// \t\t[addTodoAsync.fulfilled]: (state, action) => {\n// \t\t\tstate.push(action.payload.todo);\n// \t\t},\n// \t\t[toggleCompleteAsync.fulfilled]: (state, action) => {\n// \t\t\tconst index = state.findIndex(\n// \t\t\t\t(todo) => todo.id === action.payload.todo.id\n// \t\t\t);\n// \t\t\tstate[index].completed = action.payload.todo.completed;\n// \t\t},\n// \t\t[deleteTodoAsync.fulfilled]: (state, action) => {\n// \t\t\treturn state.filter((todo) => todo.id !== action.payload.id);\n// \t\t},\n// \t},\n// });\n\n// export const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\n\n// export default todoSlice.reducer;\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async actions for CRUD operations\nexport const getTodosAsync = createAsyncThunk('todos/getTodosAsync', async () => {\n  const response = await fetch('http://localhost:7000/todos');\n  if (response.ok) {\n    const todos = await response.json();\n    return {\n      todos\n    };\n  }\n});\nexport const addTodoAsync = createAsyncThunk('todos/addTodoAsync', async payload => {\n  const response = await fetch('http://localhost:7000/todos', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  if (response.ok) {\n    const todo = await response.json();\n    return {\n      todo\n    };\n  }\n});\nexport const toggleCompleteAsync = createAsyncThunk('todos/toggleCompleteAsync', async payload => {\n  const response = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      completed: payload.completed\n    })\n  });\n  if (response.ok) {\n    const todo = await response.json();\n    return {\n      todo\n    };\n  }\n});\nexport const deleteTodoAsync = createAsyncThunk('todos/deleteTodoAsync', async payload => {\n  const response = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    return {\n      id: payload.id\n    };\n  }\n});\n\n// Slice definition\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState: {\n    items: [],\n    filter: 'all' // Filters: 'all', 'completed', 'pending', 'overdue'\n  },\n  reducers: {\n    setFilter: (state, action) => {\n      state.filter = action.payload;\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.fulfilled]: (state, action) => {\n      state.items = action.payload.todos;\n    },\n    [addTodoAsync.fulfilled]: (state, action) => {\n      state.items.push(action.payload.todo);\n    },\n    [toggleCompleteAsync.fulfilled]: (state, action) => {\n      const index = state.items.findIndex(todo => todo.id === action.payload.todo.id);\n      state.items[index].completed = action.payload.todo.completed;\n    },\n    [deleteTodoAsync.fulfilled]: (state, action) => {\n      state.items = state.items.filter(todo => todo.id !== action.payload.id);\n    }\n  }\n});\nexport const {\n  setFilter\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getTodosAsync","response","fetch","ok","todos","json","addTodoAsync","payload","method","headers","body","JSON","stringify","todo","toggleCompleteAsync","id","completed","deleteTodoAsync","todoSlice","name","initialState","items","filter","reducers","setFilter","state","action","extraReducers","fulfilled","push","index","findIndex","actions","reducer"],"sources":["/media/vikash/Local Disk extra/iNTERN pRoject/react-redux-todo-app/final/src/redux/todoSlice.js"],"sourcesContent":["// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// import { nanoid } from 'nanoid';\n\n// export const getTodosAsync = createAsyncThunk(\n// \t'todos/getTodosAsync',\n// \tasync () => {\n// \t\tconst resp = await fetch('http://localhost:7000/todos');\n// \t\tif (resp.ok) {\n// \t\t\tconst todos = await resp.json();\n// \t\t\treturn { todos };\n// \t\t}\n// \t}\n// );\n\n// export const addTodoAsync = createAsyncThunk(\n// \t'todos/addTodoAsync',\n// \tasync (payload) => {\n// \t\tconst resp = await fetch('http://localhost:7000/todos', {\n// \t\t\tmethod: 'POST',\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({ title: payload.title, dueDate: payload.dueDate }),\n// \t\t});\n\n// \t\tif (resp.ok) {\n// \t\t\tconst todo = await resp.json();\n// \t\t\treturn { todo };\n// \t\t}\n// \t}\n// );\n\n// export const toggleCompleteAsync = createAsyncThunk(\n// \t'todos/completeTodoAsync',\n// \tasync (payload) => {\n// \t\tconst resp = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n// \t\t\tmethod: 'PATCH',\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({ completed: payload.completed }),\n// \t\t});\n\n// \t\tif (resp.ok) {\n// \t\t\tconst todo = await resp.json();\n// \t\t\treturn { todo };\n// \t\t}\n// \t}\n// );\n\n// export const deleteTodoAsync = createAsyncThunk(\n// \t'todos/deleteTodoAsync',\n// \tasync (payload) => {\n// \t\tconst resp = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n// \t\t\tmethod: 'DELETE',\n// \t\t});\n\n// \t\tif (resp.ok) {\n// \t\t\treturn { id: payload.id };\n// \t\t}\n// \t}\n// );\n\n// export const todoSlice = createSlice({\n// \tname: 'todos',\n// \tinitialState: [],\n// \treducers: {\n// \t\taddTodo: (state, action) => {\n// \t\t\tconst todo = {\n// \t\t\t\tid: nanoid(),\n// \t\t\t\ttitle: action.payload.title,\n// \t\t\t\tdueDate: action.payload.dueDate,\n// \t\t\t\tcompleted: false,\n// \t\t\t};\n// \t\t\tstate.push(todo);\n// \t\t},\n// \t\ttoggleComplete: (state, action) => {\n// \t\t\tconst index = state.findIndex((todo) => todo.id === action.payload.id);\n// \t\t\tstate[index].completed = action.payload.completed;\n// \t\t},\n// \t\tdeleteTodo: (state, action) => {\n// \t\t\treturn state.filter((todo) => todo.id !== action.payload.id);\n// \t\t},\n// \t},\n// \textraReducers: {\n// \t\t[getTodosAsync.fulfilled]: (state, action) => {\n// \t\t\treturn action.payload.todos;\n// \t\t},\n// \t\t[addTodoAsync.fulfilled]: (state, action) => {\n// \t\t\tstate.push(action.payload.todo);\n// \t\t},\n// \t\t[toggleCompleteAsync.fulfilled]: (state, action) => {\n// \t\t\tconst index = state.findIndex(\n// \t\t\t\t(todo) => todo.id === action.payload.todo.id\n// \t\t\t);\n// \t\t\tstate[index].completed = action.payload.todo.completed;\n// \t\t},\n// \t\t[deleteTodoAsync.fulfilled]: (state, action) => {\n// \t\t\treturn state.filter((todo) => todo.id !== action.payload.id);\n// \t\t},\n// \t},\n// });\n\n// export const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\n\n// export default todoSlice.reducer;\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async actions for CRUD operations\nexport const getTodosAsync = createAsyncThunk('todos/getTodosAsync', async () => {\n\tconst response = await fetch('http://localhost:7000/todos');\n\tif (response.ok) {\n\t\tconst todos = await response.json();\n\t\treturn { todos };\n\t}\n});\n\nexport const addTodoAsync = createAsyncThunk('todos/addTodoAsync', async (payload) => {\n\tconst response = await fetch('http://localhost:7000/todos', {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify(payload),\n\t});\n\tif (response.ok) {\n\t\tconst todo = await response.json();\n\t\treturn { todo };\n\t}\n});\n\nexport const toggleCompleteAsync = createAsyncThunk('todos/toggleCompleteAsync', async (payload) => {\n\tconst response = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n\t\tmethod: 'PATCH',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify({ completed: payload.completed }),\n\t});\n\tif (response.ok) {\n\t\tconst todo = await response.json();\n\t\treturn { todo };\n\t}\n});\n\nexport const deleteTodoAsync = createAsyncThunk('todos/deleteTodoAsync', async (payload) => {\n\tconst response = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n\t\tmethod: 'DELETE',\n\t});\n\tif (response.ok) {\n\t\treturn { id: payload.id };\n\t}\n});\n\n// Slice definition\nconst todoSlice = createSlice({\n\tname: 'todos',\n\tinitialState: {\n\t\titems: [],\n\t\tfilter: 'all', // Filters: 'all', 'completed', 'pending', 'overdue'\n\t},\n\treducers: {\n\t\tsetFilter: (state, action) => {\n\t\t\tstate.filter = action.payload;\n\t\t},\n\t},\n\textraReducers: {\n\t\t[getTodosAsync.fulfilled]: (state, action) => {\n\t\t\tstate.items = action.payload.todos;\n\t\t},\n\t\t[addTodoAsync.fulfilled]: (state, action) => {\n\t\t\tstate.items.push(action.payload.todo);\n\t\t},\n\t\t[toggleCompleteAsync.fulfilled]: (state, action) => {\n\t\t\tconst index = state.items.findIndex((todo) => todo.id === action.payload.todo.id);\n\t\t\tstate.items[index].completed = action.payload.todo.completed;\n\t\t},\n\t\t[deleteTodoAsync.fulfilled]: (state, action) => {\n\t\t\tstate.items = state.items.filter((todo) => todo.id !== action.payload.id);\n\t\t},\n\t},\n});\n\nexport const { setFilter } = todoSlice.actions;\nexport default todoSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}