{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\nimport { loadFromLocalStorage, saveToLocalStorage } from '../utils/localStorage';\nconst defaultTodos = [{\n  id: \"random-id-1\",\n  title: \"todo 1\",\n  completed: true,\n  dueDate: \"2024-12-05\"\n}, {\n  id: \"random-id-2\",\n  title: \"todo 2\",\n  completed: false,\n  dueDate: \"2024-12-10\"\n}];\n\n// Load todos from localStorage\nconst persistedState = loadFromLocalStorage() || {\n  items: [],\n  filter: 'all'\n};\n\n// Combine defaultTodos with persistedTodos, ensuring no duplicates by ID\nconst combinedTodos = [...defaultTodos, ...persistedState.items.filter(persistedTodo => !defaultTodos.some(todo => todo.id === persistedTodo.id))];\nconst store = configureStore({\n  reducer: {\n    todos: todoReducer\n  },\n  preloadedState: {\n    items: combinedTodos,\n    // Combine both default and persisted todos\n    filter: persistedState.filter || 'all' // Ensure filter state is also handled\n  }\n});\nstore.subscribe(() => {\n  saveToLocalStorage(store.getState().todos); // Save todos state to localStorage on every change\n});\nexport default store;","map":{"version":3,"names":["configureStore","todoReducer","loadFromLocalStorage","saveToLocalStorage","defaultTodos","id","title","completed","dueDate","persistedState","items","filter","combinedTodos","persistedTodo","some","todo","store","reducer","todos","preloadedState","subscribe","getState"],"sources":["/media/vikash/Local Disk extra/iNTERN pRoject/react-redux-todo-app/final/src/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\nimport { loadFromLocalStorage, saveToLocalStorage } from '../utils/localStorage';\n\nconst defaultTodos = [\n  {\n    id: \"random-id-1\",\n    title: \"todo 1\",\n    completed: true,\n    dueDate: \"2024-12-05\",\n  },\n  {\n    id: \"random-id-2\",\n    title: \"todo 2\",\n    completed: false,\n    dueDate: \"2024-12-10\",\n  },\n];\n\n// Load todos from localStorage\nconst persistedState = loadFromLocalStorage() || { items: [], filter: 'all' };\n\n// Combine defaultTodos with persistedTodos, ensuring no duplicates by ID\nconst combinedTodos = [\n  ...defaultTodos,\n  ...persistedState.items.filter(\n    persistedTodo => !defaultTodos.some(todo => todo.id === persistedTodo.id)\n  ),\n];\n\nconst store = configureStore({\n  reducer: {\n    todos: todoReducer,\n  },\n  preloadedState: { \n    items: combinedTodos, // Combine both default and persisted todos\n    filter: persistedState.filter || 'all', // Ensure filter state is also handled\n  },\n});\n\nstore.subscribe(() => {\n  saveToLocalStorage(store.getState().todos); // Save todos state to localStorage on every change\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,oBAAoB,EAAEC,kBAAkB,QAAQ,uBAAuB;AAEhF,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,aAAa;EACjBC,KAAK,EAAE,QAAQ;EACfC,SAAS,EAAE,IAAI;EACfC,OAAO,EAAE;AACX,CAAC,EACD;EACEH,EAAE,EAAE,aAAa;EACjBC,KAAK,EAAE,QAAQ;EACfC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACX,CAAC,CACF;;AAED;AACA,MAAMC,cAAc,GAAGP,oBAAoB,CAAC,CAAC,IAAI;EAAEQ,KAAK,EAAE,EAAE;EAAEC,MAAM,EAAE;AAAM,CAAC;;AAE7E;AACA,MAAMC,aAAa,GAAG,CACpB,GAAGR,YAAY,EACf,GAAGK,cAAc,CAACC,KAAK,CAACC,MAAM,CAC5BE,aAAa,IAAI,CAACT,YAAY,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACV,EAAE,KAAKQ,aAAa,CAACR,EAAE,CAC1E,CAAC,CACF;AAED,MAAMW,KAAK,GAAGhB,cAAc,CAAC;EAC3BiB,OAAO,EAAE;IACPC,KAAK,EAAEjB;EACT,CAAC;EACDkB,cAAc,EAAE;IACdT,KAAK,EAAEE,aAAa;IAAE;IACtBD,MAAM,EAAEF,cAAc,CAACE,MAAM,IAAI,KAAK,CAAE;EAC1C;AACF,CAAC,CAAC;AAEFK,KAAK,CAACI,SAAS,CAAC,MAAM;EACpBjB,kBAAkB,CAACa,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACH,KAAK,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}