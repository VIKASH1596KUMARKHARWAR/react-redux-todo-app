{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\nimport { loadFromLocalStorage, saveToLocalStorage } from '../utils/localStorage';\nconst defaultTodos = [{\n  id: \"random-id-1\",\n  title: \"todo 1\",\n  completed: true,\n  dueDate: \"2024-12-05\"\n}, {\n  id: \"random-id-2\",\n  title: \"todo 2\",\n  completed: false,\n  dueDate: \"2024-12-10\"\n}];\n\n// Load the existing todos from localStorage\nconst storedTodos = loadFromLocalStorage();\n\n// If there are stored todos in localStorage, use them; otherwise, use defaultTodos\nconst initialState = {\n  items: storedTodos ? [...storedTodos, ...defaultTodos] : defaultTodos,\n  // Combine both stored and default todos\n  filter: 'all' // This can be 'all', 'completed', 'pending', 'overdue', etc.\n};\nconst store = configureStore({\n  reducer: {\n    todos: todoReducer\n  },\n  preloadedState: initialState // Initialize with merged state\n});\nstore.subscribe(() => {\n  saveToLocalStorage(store.getState().todos); // Save updated todos to localStorage on every change\n});\nexport default store;","map":{"version":3,"names":["configureStore","todoReducer","loadFromLocalStorage","saveToLocalStorage","defaultTodos","id","title","completed","dueDate","storedTodos","initialState","items","filter","store","reducer","todos","preloadedState","subscribe","getState"],"sources":["/media/vikash/Local Disk extra/iNTERN pRoject/react-redux-todo-app/final/src/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\nimport { loadFromLocalStorage, saveToLocalStorage } from '../utils/localStorage';\n\nconst defaultTodos = [\n\t{\n\t\tid: \"random-id-1\",\n\t\ttitle: \"todo 1\",\n\t\tcompleted: true,\n\t\tdueDate: \"2024-12-05\",\n\t},\n\t{\n\t\tid: \"random-id-2\",\n\t\ttitle: \"todo 2\",\n\t\tcompleted: false,\n\t\tdueDate: \"2024-12-10\",\n\t},\n];\n\n// Load the existing todos from localStorage\nconst storedTodos = loadFromLocalStorage();\n\n// If there are stored todos in localStorage, use them; otherwise, use defaultTodos\nconst initialState = {\n\titems: storedTodos ? [...storedTodos, ...defaultTodos] : defaultTodos, // Combine both stored and default todos\n\tfilter: 'all', // This can be 'all', 'completed', 'pending', 'overdue', etc.\n};\n\nconst store = configureStore({\n\treducer: {\n\t\ttodos: todoReducer,\n\t},\n\tpreloadedState: initialState, // Initialize with merged state\n});\n\nstore.subscribe(() => {\n\tsaveToLocalStorage(store.getState().todos); // Save updated todos to localStorage on every change\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,oBAAoB,EAAEC,kBAAkB,QAAQ,uBAAuB;AAEhF,MAAMC,YAAY,GAAG,CACpB;EACCC,EAAE,EAAE,aAAa;EACjBC,KAAK,EAAE,QAAQ;EACfC,SAAS,EAAE,IAAI;EACfC,OAAO,EAAE;AACV,CAAC,EACD;EACCH,EAAE,EAAE,aAAa;EACjBC,KAAK,EAAE,QAAQ;EACfC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACV,CAAC,CACD;;AAED;AACA,MAAMC,WAAW,GAAGP,oBAAoB,CAAC,CAAC;;AAE1C;AACA,MAAMQ,YAAY,GAAG;EACpBC,KAAK,EAAEF,WAAW,GAAG,CAAC,GAAGA,WAAW,EAAE,GAAGL,YAAY,CAAC,GAAGA,YAAY;EAAE;EACvEQ,MAAM,EAAE,KAAK,CAAE;AAChB,CAAC;AAED,MAAMC,KAAK,GAAGb,cAAc,CAAC;EAC5Bc,OAAO,EAAE;IACRC,KAAK,EAAEd;EACR,CAAC;EACDe,cAAc,EAAEN,YAAY,CAAE;AAC/B,CAAC,CAAC;AAEFG,KAAK,CAACI,SAAS,CAAC,MAAM;EACrBd,kBAAkB,CAACU,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACH,KAAK,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}